
#
# addon ingressgateways configuration
#
enabled: false

# A-la-carte istio ingress gateway.
# Must be installed in a separate namespace, to minimize access to secrets.

name: istio-ingressgateway
labels:
  app: istio-ingressgateway
  istio: ingressgateway
ports:
## You can add custom gateway ports in user values overrides, but it must include those ports since helm replaces.
# Note that AWS ELB will by default perform health checks on the first port
# on this list. Setting this to the health check port will ensure that health
# checks always work. https://github.com/istio/istio/issues/12503
- port: 15021
  targetPort: 15021
  name: status-port
  protocol: TCP
- port: 80
  targetPort: 8080
  name: http2
  protocol: TCP
- port: 443
  targetPort: 8443
  name: https
  protocol: TCP

# Scalability tuning
# replicaCount: 1
rollingMaxSurge: 100%
rollingMaxUnavailable: 25%
autoscaleEnabled: true
autoscaleMin: 1
autoscaleMax: 5

cpu:
  targetAverageUtilization: 80

resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 2000m
    memory: 1024Mi

loadBalancerIP: ""
loadBalancerSourceRanges: []
serviceAnnotations: {}

# To generate an internal load balancer:
# --set serviceAnnotations.cloud.google.com/load-balancer-type=internal
#serviceAnnotations:
#    cloud.google.com/load-balancer-type: "internal"

podAnnotations: {}
type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be

##############
secretVolumes:
- name: ingressgateway-certs
  secretName: istio-ingressgateway-certs
  mountPath: /etc/istio/ingressgateway-certs
- name: ingressgateway-ca-certs
  secretName: istio-ingressgateway-ca-certs
  mountPath: /etc/istio/ingressgateway-ca-certs

customService: false
externalTrafficPolicy: ""

ingressPorts: []
additionalContainers: []
configVolumes: []

serviceAccount:
  # Annotations to add to the service account
  annotations: {}

### Advanced options ############
env: {}
nodeSelector: {}
tolerations: []

# Specify the pod anti-affinity that allows you to constrain which nodes
# your pod is eligible to be scheduled based on labels on pods that are
# already running on the node rather than based on labels on nodes.
# There are currently two types of anti-affinity:
#    "requiredDuringSchedulingIgnoredDuringExecution"
#    "preferredDuringSchedulingIgnoredDuringExecution"
# which denote "hard" vs. "soft" requirements, you can define your values
# in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
# correspondingly.
# For example:
# podAntiAffinityLabelSelector:
# - key: security
#   operator: In
#   values: S1,S2
#   topologyKey: "kubernetes.io/hostname"
# This pod anti-affinity rule says that the pod requires not to be scheduled
# onto a node if that node is already running a pod with label having key
# "security" and value "S1".
podAntiAffinityLabelSelector: []
podAntiAffinityTermLabelSelector: []

# whether to run the gateway in a privileged container
runAsRoot: false

# The injection template to use for the gateway. If not set, no injection will be performed.
injectionTemplate: ""

# Revision is set as 'version' label and part of the resource names when installing multiple control planes.
revision: ""

# For Helm compatibility.
ownerName: ""

meshConfig:
  enablePrometheusMerge: true

  # The trust domain corresponds to the trust root of a system
  # Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
  trustDomain: "cluster.local"

  defaultConfig:
    proxyMetadata: {}
    tracing:
    #      tlsSettings:
    #        mode: DISABLE # DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
    #        clientCertificate: # example: /etc/istio/tracer/cert-chain.pem
    #        privateKey:        # example: /etc/istio/tracer/key.pem
    #        caCertificates:    # example: /etc/istio/tracer/root-cert.pem
    #        sni:               # example: tracer.somedomain
    #        subjectAltNames: []
    # - tracer.somedomain
